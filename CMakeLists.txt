cmake_minimum_required(VERSION 3.8)
project(crest)

find_package(Boost REQUIRED COMPONENTS system thread log program_options chrono)
find_package(Threads REQUIRED)

if(APPLE)
    file(GLOB OPENSSL_ROOT_DIR /usr/local/Cellar/openssl/*)
    list(REVERSE OPENSSL_ROOT_DIR)
    set(OPENSSL_VERSION "1.0.2l")
endif()

find_package(OpenSSL)
find_package(ZLIB)

set(pugixml_LIBRARY_DIR ../pugixml-1.9/build/)
set(pugixml_INCLUDE_DIR ../pugixml-1.9/src/)

if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    message("-- configuring clang options")
    set(CMAKE_CXX_FLAGS "-arch x86_64 -std=c++14 -stdlib=libc++ -DBOOST_LOG_DYN_LINK -Wno-deprecated-declarations")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    message("-- configuring gcc options")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++14 -DBOOST_LOG_DYN_LINK")
endif()
set(CPPFLAGS -stdlib=libc++ LDFLAGS -lcpprest -lssl -lcrypto -lboost_system -lboost_thread-mt -lboost_chrono-mt -lpthread -pthread -lz)
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_RELEASE} -Wall ")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wall -O3 ")
set(CMAKE_CXX_STANDARD 14)
set(SOURCE_FILES RiverService/main.cpp RiverService/include/feature.h RiverService/include/server.h RiverService/include/utils.h RiverService/include/data_source.h RiverService/include/data_store.h RiverService/include/lat_lon.h RiverService/include/observation_store.h RiverService/include/sensor_obs.h RiverService/src/server.cpp RiverService/src/utils.cpp RiverService/src/data_source.cpp)
add_executable(crest ${SOURCE_FILES})

set(CPPRESTSDK_INCLUDE_DIR "./libs/cpprestsdk/Release/include")
set(APP_INCLUDE_DIR "RiverService/include")
set(HEADER_SEARCH_PATHS ${CPPRESTSDK_INCLUDE_DIR} ${APP_INCLUDE_DIR} ${Boost_INCLUDE_DIR} ${OPENSSL_INCLUDE_DIR} ${ZLIB_INCLUDE_DIRS} pugixml)

if(APPLE)
    set(OPENSSL_LIBS "/usr/local/Cellar/openssl/${OPENSSL_VERSION}/lib/libssl.1.0.0.dylib;/usr/local/Cellar/openssl/${OPENSSL_VERSION}/lib/libcrypto.1.0.0.dylib")
    set(PUGIXML_LIBRARY "${PROJECT_SOURCE_DIR}/../pugixml-1.9/build/libpugixml.a")
    set(CPPRESTSDK_LIBRARY "${PROJECT_SOURCE_DIR}/libs/cpprestsdk/build.release/Binaries/libcpprest.a")
    set(LIBRARIES_SEARCH_PATHS ${PUGIXML_LIBRARY} ${CPPRESTSDK_LIBRARY} ${OPENSSL_LIBS} ${Boost_LIBRARIES} ${ZLIB_LIBRARIES} pugixml)
else()
    set(PUGIXML_LIBRARY "${PROJECT_SOURCE_DIR}/../pugixml-1.9/build/libpugixml.a")
    set(OPENSSL_LIBS "${OPENSSL_LIBRARIES}")
    set(CPPRESTSDK_LIBRARY "${PROJECT_SOURCE_DIR}/libs/cpprestsdk/build.release/Binaries/libcpprest.a")
    set(LIBRARIES_SEARCH_PATHS ${PUGIXML_LIBRARY} ${CPPRESTSDK_LIBRARY} ${OPENSSL_LIBS} ${Boost_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
endif()

include_directories(${HEADER_SEARCH_PATHS} ${pugixml_INCLUDE_DIR})
link_directories(${pugixml_LIBRARY_DIR})

if (APPLE)
    target_link_libraries(${PROJECT_NAME} "-framework CoreFoundation")
    target_link_libraries(${PROJECT_NAME} "-framework Security")
    target_link_libraries(${PROJECT_NAME} ${LIBRARIES_SEARCH_PATHS})
    set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS "-W1, -F/Library/Frameworks")
else()
    target_link_libraries(${PROJECT_NAME} ${LIBRARIES_SEARCH_PATHS})
endif()
